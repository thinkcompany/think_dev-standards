// ==========================
// Utilities
// ==========================

// Import if Google Fonts URL is defined

@if variable-exists('font-url--google') {
	@import url($font-url--google);
}

// Import if Typekit Fonts are defined
@if variable-exists(font-url--typekit) {
	@import url($font-url--typekit);
}

// Calculate em values

@function em($target, $context: $base__font-size) {
	@return	($target / $context) * 1em;
}

// Call the color palette modifiers

@function palette($palette, $shade: 'base') {
	@return map-get(map-get($palettes, $palette), $shade);
}

// Mixins

@mixin bg-colors($map) {
	@each $theme, $color in $map {
		&--#{$theme} {
			background-color: $color;
		}
	}
}

@mixin img-replace($img, $w, $h, $disp: block) {
	background-image: url('#{$path--rel}/#{$img}');
	background-repeat: no-repeat;
	width: $w;
	height: $h;
	display: $disp;
}

@mixin p-el(
	$el,
	$el-w: null,
	$el-h: null) {

	@if $el == "before" or $el == "after" {
		&:#{$el} {
			@extend %pseudos;
			width: $el-w;
			height: $el-h;
			@content;
		}
	} @else {
		@warn " `#{$el}` is not a valid pseudo-element. "
	}
}

// BEM selectors

@mixin e($element) {
	&__#{$element} {
		@content;
	}
}

@mixin m($modifier) {
	&--#{$modifier} {
		@content;
	}
}

/*-----------------------------*\
	Media Query Mixins
\*-----------------------------*/

@mixin responsive($width) {
	@if $width == wide-screens {
		@media only screen and (max-width: $width-large) { @content; }
	}
	@else if $width == medium-screens {
		@media only screen and (max-width: $width-medium) { @content; }
	}
	@else if $width == small-screens {
		@media only screen and (max-width: $width-small) { @content; }
	}
}

/*-----------------------------*\
	Retina Mixins
\*-----------------------------*/

$is-hidpi: "(-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5), (min-resolution: 1.5dppx)";

@mixin background-size($width, $height) {
	-webkit-background-size: $width $height;
	-moz-background-size: $width $height;
	background-size: $width $height;
}

@mixin retinize($file, $type, $width, $height) {
	// $path--rel is a variable for our image assets
	background-image: url($path--rel + $file + '.' + $type);

	@media #{$is-hidpi} {
		& {
			background-image: url($path--rel + $file + '-2x.' + $type);
			@include background-size($width, $height);
		}
	}
}